<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 自动扫描且只扫描@Controller -->
	<context:component-scan base-package="com.ppcxy.cyfm,com.ppcxy.common" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"
						   validator="validator"
						   conversion-service="conversionService"
						   enable-matrix-variables="true">
		<!-- 异步支持 默认30秒超时 -->
		<mvc:async-support default-timeout="30000" task-executor="executor"/>

		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
            </bean>
  		</mvc:message-converters>
		<mvc:argument-resolvers>
			<bean class="com.ppcxy.common.web.bind.method.annotation.PageableMethodArgumentResolver"/>
			<bean class="com.ppcxy.common.web.bind.method.annotation.SearchableMethodArgumentResolver"/>
			<bean class="com.ppcxy.common.web.bind.method.annotation.FormModelMethodArgumentResolver"/>
			<bean class="com.ppcxy.common.web.bind.method.annotation.CurrentUserMethodArgumentResolver"/>
		</mvc:argument-resolvers>

	</mvc:annotation-driven>

	<mvc:view-controller path="/" view-name="index"/>
	<mvc:view-controller path="/web/mashup-client" view-name="/web/mashup-client"/>

	<!-- 静态资源映射 -->
	<mvc:resources mapping="/ueditor/**" location="file:///D:/resources/ueditor/" />

	<!-- 当在web.xml 中   DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
	<mvc:default-servlet-handler/>

	<!-- 拦截器设置 -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor">
			<constructor-arg ref="conversionService"/>
		</bean>
		<bean class="com.ppcxy.common.web.interceptor.SetCommonDataInterceptor">
			<property name="excludeUrlPatterns">
				<value>
					/admin/polling
				</value>
			</property>
		</bean>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/admin/polling"/>
			<bean class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor"/>
		</mvc:interceptor>
		<!--<mvc:interceptor>-->
		<!--<mvc:mapping path="/**"/>-->
		<!--<bean class="cn.javass.test.interceptor.TestInterceptor"/>-->
		<!--</mvc:interceptor>-->
	</mvc:interceptors>

	<!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource"/>
	</bean>

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="ignoreAcceptHeader" value="true" />
            <property name="defaultContentType" value="application/json" />
	    <property name="mediaTypes" >
	        <value>
	            json=application/json
	            xml=application/xml
	        </value>
	    </property>
	</bean>
	
	<!-- 定义JSP文件的位置 -->  
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
		<property name="exceptionMappings">  
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<prop key="java.lang.Throwable">error/500</prop>
            </props>  
		</property>  
    </bean> 
    
	<!-- 支持 Shiro对Controller的方法级AOP安全控制  begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	<!-- end -->

	<!--&lt;!&ndash; 文件上传相关 &ndash;&gt;-->
	<!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
		<!--&lt;!&ndash;one of the properties available;the maximum upload size in bytes 100M&ndash;&gt;-->
		<!--&lt;!&ndash;<property name="maxUploadSize" value="104857600"/>&ndash;&gt;-->
		<!--<property name="maxUploadSize" value="524288000"/>-->
	<!--</bean>-->

	<!-- 控制器异常处理 -->
	<bean id="exceptionHandlerExceptionResolver" class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver">
		<property name="contentNegotiationManager" ref="contentNegotiationManager"/>
	</bean>

</beans>
